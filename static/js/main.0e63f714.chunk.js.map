{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","beast","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,4BACpB,6BAAKL,EAAMI,MAAME,OACjB,4BAAIN,EAAMI,MAAMG,aCJXC,EAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAK,OACpB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,UCApBM,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MC4CCG,E,kDAjDb,aAAe,IAAD,8BACZ,gBAkBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAWO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAC3BT,SAAUkB,S,+BASN,IAAD,EACyBC,KAAKN,MAA9Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAK,OAC5CA,EAAME,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAc,kBACdC,aAAgBe,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0e63f714.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"beast\" src={`https://robohash.org/${props.beast.id}?set=set2&size=180x180`} />\n        <h2>{props.beast.name}</h2>\n        <p>{props.beast.email}</p>\n    </div>\n)","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component';\nexport const CardList = props => (\n\n    <div className='card-list'>\n        {\n            props.monsters.map(beast => (\n                <Card key={beast.id} beast={beast}>\n                    {/* beast is passed as the props in this case to Card like how this.setstate.monsters was passed\n                    inside app.js into CardList */}\n                </Card>\n            ))\n        }\n    </div>\n);","import React from 'react';\nimport './search-box.styles.css';\n\n// functional component just gets props and returns HTML. \n// if there is no need for an internal state or lifecycle MSInputMethodContext, use functional component\n\n// placeholder and handlechange are introduced as a way to show reusable components. app.js has the definitions for these 2.\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n    className='search'\n    type='search' \n    placeholder= {placeholder}\n    onChange={handleChange}>\n  </input>\n)","\nimport React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.components';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // this bind feature can be used if we dont wanna use the arrow function\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({\n        monsters: users\n      }));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n    //console.log('Testing values');\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(beast => \n      beast.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder = 'Search Monsters'\n          handleChange = {this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n          {/* children is whatever is used within these brackets of the component\n          props is whatever is passed into it like the monsters = this.state thing \n          for this code, we are passing monsters as a prop\n          */}\n\n        </CardList>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}